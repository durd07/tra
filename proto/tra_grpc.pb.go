// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tra

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TraServiceClient is the client API for TraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TraServiceClient interface {
	CreateLskpmc(ctx context.Context, in *TraServiceRequest, opts ...grpc.CallOption) (*TraServiceResponse, error)
	UpdateLskpmc(ctx context.Context, in *TraServiceRequest, opts ...grpc.CallOption) (*TraServiceResponse, error)
	RetrieveLskpmc(ctx context.Context, in *TraServiceRequest, opts ...grpc.CallOption) (*TraServiceResponse, error)
	DeleteLskpmc(ctx context.Context, in *TraServiceRequest, opts ...grpc.CallOption) (*TraServiceResponse, error)
	SubscribeLskpmc(ctx context.Context, in *TraServiceRequest, opts ...grpc.CallOption) (TraService_SubscribeLskpmcClient, error)
}

type traServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTraServiceClient(cc grpc.ClientConnInterface) TraServiceClient {
	return &traServiceClient{cc}
}

func (c *traServiceClient) CreateLskpmc(ctx context.Context, in *TraServiceRequest, opts ...grpc.CallOption) (*TraServiceResponse, error) {
	out := new(TraServiceResponse)
	err := c.cc.Invoke(ctx, "/envoy.extensions.filters.network.sip_proxy.tra.v3.TraService/CreateLskpmc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traServiceClient) UpdateLskpmc(ctx context.Context, in *TraServiceRequest, opts ...grpc.CallOption) (*TraServiceResponse, error) {
	out := new(TraServiceResponse)
	err := c.cc.Invoke(ctx, "/envoy.extensions.filters.network.sip_proxy.tra.v3.TraService/UpdateLskpmc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traServiceClient) RetrieveLskpmc(ctx context.Context, in *TraServiceRequest, opts ...grpc.CallOption) (*TraServiceResponse, error) {
	out := new(TraServiceResponse)
	err := c.cc.Invoke(ctx, "/envoy.extensions.filters.network.sip_proxy.tra.v3.TraService/RetrieveLskpmc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traServiceClient) DeleteLskpmc(ctx context.Context, in *TraServiceRequest, opts ...grpc.CallOption) (*TraServiceResponse, error) {
	out := new(TraServiceResponse)
	err := c.cc.Invoke(ctx, "/envoy.extensions.filters.network.sip_proxy.tra.v3.TraService/DeleteLskpmc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traServiceClient) SubscribeLskpmc(ctx context.Context, in *TraServiceRequest, opts ...grpc.CallOption) (TraService_SubscribeLskpmcClient, error) {
	stream, err := c.cc.NewStream(ctx, &TraService_ServiceDesc.Streams[0], "/envoy.extensions.filters.network.sip_proxy.tra.v3.TraService/SubscribeLskpmc", opts...)
	if err != nil {
		return nil, err
	}
	x := &traServiceSubscribeLskpmcClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TraService_SubscribeLskpmcClient interface {
	Recv() (*TraServiceResponse, error)
	grpc.ClientStream
}

type traServiceSubscribeLskpmcClient struct {
	grpc.ClientStream
}

func (x *traServiceSubscribeLskpmcClient) Recv() (*TraServiceResponse, error) {
	m := new(TraServiceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TraServiceServer is the server API for TraService service.
// All implementations must embed UnimplementedTraServiceServer
// for forward compatibility
type TraServiceServer interface {
	CreateLskpmc(context.Context, *TraServiceRequest) (*TraServiceResponse, error)
	UpdateLskpmc(context.Context, *TraServiceRequest) (*TraServiceResponse, error)
	RetrieveLskpmc(context.Context, *TraServiceRequest) (*TraServiceResponse, error)
	DeleteLskpmc(context.Context, *TraServiceRequest) (*TraServiceResponse, error)
	SubscribeLskpmc(*TraServiceRequest, TraService_SubscribeLskpmcServer) error
	mustEmbedUnimplementedTraServiceServer()
}

// UnimplementedTraServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTraServiceServer struct {
}

func (UnimplementedTraServiceServer) CreateLskpmc(context.Context, *TraServiceRequest) (*TraServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLskpmc not implemented")
}
func (UnimplementedTraServiceServer) UpdateLskpmc(context.Context, *TraServiceRequest) (*TraServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLskpmc not implemented")
}
func (UnimplementedTraServiceServer) RetrieveLskpmc(context.Context, *TraServiceRequest) (*TraServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLskpmc not implemented")
}
func (UnimplementedTraServiceServer) DeleteLskpmc(context.Context, *TraServiceRequest) (*TraServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLskpmc not implemented")
}
func (UnimplementedTraServiceServer) SubscribeLskpmc(*TraServiceRequest, TraService_SubscribeLskpmcServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeLskpmc not implemented")
}
func (UnimplementedTraServiceServer) mustEmbedUnimplementedTraServiceServer() {}

// UnsafeTraServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TraServiceServer will
// result in compilation errors.
type UnsafeTraServiceServer interface {
	mustEmbedUnimplementedTraServiceServer()
}

func RegisterTraServiceServer(s grpc.ServiceRegistrar, srv TraServiceServer) {
	s.RegisterService(&TraService_ServiceDesc, srv)
}

func _TraService_CreateLskpmc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraServiceServer).CreateLskpmc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envoy.extensions.filters.network.sip_proxy.tra.v3.TraService/CreateLskpmc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraServiceServer).CreateLskpmc(ctx, req.(*TraServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TraService_UpdateLskpmc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraServiceServer).UpdateLskpmc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envoy.extensions.filters.network.sip_proxy.tra.v3.TraService/UpdateLskpmc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraServiceServer).UpdateLskpmc(ctx, req.(*TraServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TraService_RetrieveLskpmc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraServiceServer).RetrieveLskpmc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envoy.extensions.filters.network.sip_proxy.tra.v3.TraService/RetrieveLskpmc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraServiceServer).RetrieveLskpmc(ctx, req.(*TraServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TraService_DeleteLskpmc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraServiceServer).DeleteLskpmc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envoy.extensions.filters.network.sip_proxy.tra.v3.TraService/DeleteLskpmc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraServiceServer).DeleteLskpmc(ctx, req.(*TraServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TraService_SubscribeLskpmc_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TraServiceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TraServiceServer).SubscribeLskpmc(m, &traServiceSubscribeLskpmcServer{stream})
}

type TraService_SubscribeLskpmcServer interface {
	Send(*TraServiceResponse) error
	grpc.ServerStream
}

type traServiceSubscribeLskpmcServer struct {
	grpc.ServerStream
}

func (x *traServiceSubscribeLskpmcServer) Send(m *TraServiceResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TraService_ServiceDesc is the grpc.ServiceDesc for TraService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TraService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.extensions.filters.network.sip_proxy.tra.v3.TraService",
	HandlerType: (*TraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLskpmc",
			Handler:    _TraService_CreateLskpmc_Handler,
		},
		{
			MethodName: "UpdateLskpmc",
			Handler:    _TraService_UpdateLskpmc_Handler,
		},
		{
			MethodName: "RetrieveLskpmc",
			Handler:    _TraService_RetrieveLskpmc_Handler,
		},
		{
			MethodName: "DeleteLskpmc",
			Handler:    _TraService_DeleteLskpmc_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeLskpmc",
			Handler:       _TraService_SubscribeLskpmc_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/tra.proto",
}
