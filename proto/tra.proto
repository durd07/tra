syntax = "proto3";

package envoy.extensions.filters.network.sip_proxy.tra.v3;

//import "envoy/config/core/v3/config_source.proto";
//import "envoy/config/core/v3/grpc_service.proto";

import "google/protobuf/any.proto";
//import "validate/validate.proto";
//import "google/protobuf/duration.proto";
//import "udpa/annotations/status.proto";
//import "udpa/annotations/versioning.proto";

option go_package = "github.com/durd07/tra";
option java_package = "io.envoyproxy.envoy.extensions.filters.network.sip_proxy.tra.v3";
option java_outer_classname = "TraProto";
option java_multiple_files = true;
//option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Tra]
// Sip tra :ref:`configuration overview <config_sip_filters_tra>`.

service TraService {
	rpc Create(TraServiceRequest) returns (TraServiceResponse) {}
        rpc Update(TraServiceRequest) returns (TraServiceResponse) {}
        rpc Retrieve(TraServiceRequest) returns (TraServiceResponse) {}
        rpc Delete(TraServiceRequest) returns (TraServiceResponse) {}
	rpc Subscribe(TraServiceRequest) returns (stream TraServiceResponse) {}
}

//message TraServiceConfig {
//	// Specifies the gRPC service that hosts the rate limit service. The client
//	// will connect to this cluster when it needs to make rate limit service
//	// requests.
//	config.core.v3.GrpcService grpc_service = 1 [(validate.rules).message = {required: true}];
//
//	// API version for rate limit transport protocol. This describes the rate limit gRPC endpoint and
//	// version of messages used on the wire.
//	config.core.v3.ApiVersion transport_api_version = 2 [(validate.rules).enum = {defined_only: true}];
//	google.protobuf.Duration timeout = 3;
//}

message TraServiceRequest {
        google.protobuf.Any request = 1;
}

message TraServiceResponse {
	int32 ret = 1;
	string reason = 2;
        google.protobuf.Any response = 3;
}

message CreateRequest {
	Lskpmc lskpmc = 1;
}

message CreateResponse {
}

message UpdateRequest {
	Lskpmc lskpmc = 1;
}

message UpdateResponse {
}

message RetrieveRequest {
        string lskpmc = 1;
}

message RetrieveResponse {
	Lskpmc lskpmc = 1;
}

message DeleteRequest {
        string lskpmc = 1;
}

message DeleteResponse {
}

message SubscribeRequest {
}

message SubscribeResponse {
	repeated Lskpmc lskpmcs = 1;
}

message Lskpmc {
	string key = 1;
	string val = 2;
}
