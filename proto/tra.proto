syntax = "proto3";

package envoy.extensions.filters.network.sip_proxy.tra.v3;

//import "envoy/config/core/v3/config_source.proto";
//import "envoy/config/core/v3/grpc_service.proto";

//import "validate/validate.proto";
//import "google/protobuf/duration.proto";
//import "udpa/annotations/status.proto";
//import "udpa/annotations/versioning.proto";

option go_package = "github.com/durd07/tra";
option java_package = "io.envoyproxy.envoy.extensions.filters.network.sip_proxy.tra.v3";
option java_outer_classname = "TraProto";
option java_multiple_files = true;
//option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Tra]
// Sip tra :ref:`configuration overview <config_sip_filters_tra>`.

service TraService {
  rpc CreateLskpmc(TraServiceRequest) returns (TraServiceResponse) {}
  rpc UpdateLskpmc(TraServiceRequest) returns (TraServiceResponse) {}
  rpc RetrieveLskpmc(TraServiceRequest) returns (TraServiceResponse) {}
  rpc DeleteLskpmc(TraServiceRequest) returns (TraServiceResponse) {}
  rpc SubscribeLskpmc(TraServiceRequest) returns (stream TraServiceResponse) {}
}

//message TraServiceConfig {
//	// Specifies the gRPC service that hosts the rate limit service. The client
//	// will connect to this cluster when it needs to make rate limit service
//	// requests.
//	config.core.v3.GrpcService grpc_service = 1 [(validate.rules).message = {required: true}];
//
//	// API version for rate limit transport protocol. This describes the rate limit gRPC endpoint and
//	// version of messages used on the wire.
//	config.core.v3.ApiVersion transport_api_version = 2 [(validate.rules).enum = {defined_only: true}];
//	google.protobuf.Duration timeout = 3;
//}

message TraServiceRequest {
  oneof request {
    CreateLskpmcRequest create_lskpmc_request = 1;
    UpdateLskpmcRequest update_lskpmc_request = 2;
    RetrieveLskpmcRequest retrieve_lskpmc_request = 3;
    DeleteLskpmcRequest delete_lskpmc_request = 4;
    SubscribeLskpmcRequest subscribe_lskpmc_request = 5;
  }
}

message TraServiceResponse {
	int32 ret = 1;
	string reason = 2;
  oneof response {
    CreateLskpmcResponse create_lskpmc_response = 3;
    UpdateLskpmcResponse update_lskpmc_response = 4;
    RetrieveLskpmcResponse retrieve_lskpmc_response = 5;
    DeleteLskpmcResponse delete_lskpmc_response = 6;
    SubscribeLskpmcResponse subscribe_lskpmc_response = 7;
  }
}

message CreateLskpmcRequest {
  map<string, string> lskpmcs = 1;
}

message CreateLskpmcResponse {
}

message UpdateLskpmcRequest {
  map<string, string> lskpmcs = 1;
}

message UpdateLskpmcResponse {
}

message RetrieveLskpmcRequest {
  string lskpmc = 1;
}

message RetrieveLskpmcResponse {
  map<string, string> lskpmcs = 1;
}

message DeleteLskpmcRequest {
  string lskpmc = 1;
}

message DeleteLskpmcResponse {
}

message SubscribeLskpmcRequest {
}

message SubscribeLskpmcResponse {
  map<string, string> lskpmcs = 1;
}
